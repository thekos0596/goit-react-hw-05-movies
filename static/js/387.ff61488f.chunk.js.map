{"version":3,"file":"static/js/387.ff61488f.chunk.js","mappings":"qPAEaA,EAAcC,EAAAA,EAAAA,GAAH,mFAMXC,EAAcD,EAAAA,EAAAA,GAAH,sBAEXE,EAAgBF,EAAAA,EAAAA,EAAH,6HASbG,EAAcH,EAAAA,EAAAA,EAAH,mF,SCiBxB,EA1BgB,WACd,OAA8BI,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAMR,IAJAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAeH,GAASI,KAAKL,EAC9B,GAAE,CAACC,IAECF,EAIL,OACE,UAACN,EAAD,WACsB,IAAnBM,EAAQO,SAAgB,oEAExBP,EAAQQ,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,UAACf,EAAD,YACE,SAACC,EAAD,UAAgBa,KAChB,SAACZ,EAAD,UAAca,MAFEF,EADP,MAQlB,C,+LChCKG,EAAe,IAAIC,gBAAgB,CACvCC,QAAS,mCACTC,SAAU,QACVC,eAAe,IAGjBC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAiB,mCAAG,sGACRD,EAAAA,EAAAA,IAAA,4BAA+BL,IADvB,uBACvBO,EADuB,EACvBA,KADuB,kBAGxBA,EAAKC,SAHmB,2CAAH,qDAMjBC,EAAe,mCAAG,WAAMZ,GAAN,yFACNQ,EAAAA,EAAAA,IAAA,gBAAmBR,EAAnB,YAAyBG,IADnB,uBACrBO,EADqB,EACrBA,KADqB,kBAGtBA,GAHsB,2CAAH,sDAMfG,EAAe,mCAAG,WAAMb,GAAN,yFACNQ,EAAAA,EAAAA,IAAA,gBAAmBR,EAAnB,oBAAiCG,IAD3B,uBACrBO,EADqB,EACrBA,KADqB,kBAGtBA,EAAKI,MAHiB,2CAAH,sDAMflB,EAAc,mCAAG,WAAMI,GAAN,yFACLQ,EAAAA,EAAAA,IAAA,gBAAmBR,EAAnB,oBAAiCG,IAD5B,uBACpBO,EADoB,EACpBA,KADoB,kBAGrBA,EAAKC,SAHgB,2CAAH,sDAKdI,EAAc,mCAAG,WAAMC,GAAN,yFACLR,EAAAA,EAAAA,IAAA,wBACJL,EADI,kBACkBa,IAFb,uBACpBN,EADoB,EACpBA,KADoB,kBAKrBA,EAAKC,SALgB,2CAAH,qD","sources":["components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","services/fetchMovie.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ReviewsList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n`;\n\nexport const ReviewsItem = styled.li``;\n\nexport const ReviewsAuthor = styled.p`\n  margin-bottom: 8px;\n  font-size: 22px;\n\n  :first-letter {\n    text-transform: uppercase;\n  }\n`;\n\nexport const ReviewsText = styled.p`\n  font-size: 16px;\n  color: 212121;\n  line-height: 1.5;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReview } from 'services/fetchMovie';\nimport {\n  ReviewsList,\n  ReviewsItem,\n  ReviewsAuthor,\n  ReviewsText,\n} from './Reviews.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    getMovieReview(movieId).then(setReviews);\n  }, [movieId]);\n\n  if (!reviews) {\n    return;\n  }\n\n  return (\n    <ReviewsList>\n      {reviews.length === 0 && <p>We don't have any reviews for this movie</p>}\n\n      {reviews.map(({ id, author, content }) => (\n        <ReviewsItem key={id}>\n          <ReviewsAuthor>{author}</ReviewsAuthor>\n          <ReviewsText>{content}</ReviewsText>\n        </ReviewsItem>\n      ))}\n    </ReviewsList>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst searchParams = new URLSearchParams({\n  api_key: 'afc0fa936a8cd405bc4147ee7afbe2a0',\n  language: 'en-US',\n  include_adult: false,\n});\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const getTrendingMovies = async () => {\n  const { data } = await axios.get(`trending/all/week?${searchParams}`);\n\n  return data.results;\n};\n\nexport const getMovieDetails = async id => {\n  const { data } = await axios.get(`movie/${id}?${searchParams}`);\n\n  return data;\n};\n\nexport const getMovieCredits = async id => {\n  const { data } = await axios.get(`movie/${id}/credits?${searchParams}`);\n\n  return data.cast;\n};\n\nexport const getMovieReview = async id => {\n  const { data } = await axios.get(`movie/${id}/reviews?${searchParams}`);\n\n  return data.results;\n};\nexport const getMovieByName = async name => {\n  const { data } = await axios.get(\n    `/search/movie?${searchParams}&query=${name}`\n  );\n\n  return data.results;\n};\n"],"names":["ReviewsList","styled","ReviewsItem","ReviewsAuthor","ReviewsText","useState","reviews","setReviews","movieId","useParams","useEffect","getMovieReview","then","length","map","id","author","content","searchParams","URLSearchParams","api_key","language","include_adult","axios","getTrendingMovies","data","results","getMovieDetails","getMovieCredits","cast","getMovieByName","name"],"sourceRoot":""}