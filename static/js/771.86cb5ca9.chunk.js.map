{"version":3,"file":"static/js/771.86cb5ca9.chunk.js","mappings":"wNAEaA,EAAmBC,EAAAA,EAAAA,IAAH,oH,SCmC7B,EAlCkB,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACXC,EACND,EADMC,YAAaC,EACnBF,EADmBE,MAAOC,EAC1BH,EAD0BG,aAAcC,EACxCJ,EADwCI,aAAcC,EACtDL,EADsDK,SAAUC,EAChEN,EADgEM,OAI5DC,EADa,mCACOC,OAAOP,GAC3BQ,EAAcN,EAAaO,MAAM,EAAG,GACpCC,EAAaP,EAAaQ,QAAQ,GAClCC,EAAaP,EAAOQ,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,KAExD,OACE,UAACnB,EAAD,YACE,gBAAKoB,IAAKX,EAAQY,IAAKjB,EAAOkB,MAAM,SACpC,4BACE,0BACGlB,EADH,KACU,gCAAQO,EAAR,WAEV,wCAEE,0BAAOE,QAET,sCAEE,0BAAON,QAET,oCAEE,0BAAOQ,YAKhB,E,mCChCYQ,GAAUtB,EAAAA,EAAAA,GAAOuB,EAAAA,GAAPvB,CAAH,wKAYPwB,GAAiBxB,EAAAA,EAAAA,GAAOyB,EAAAA,GAAPzB,CAAH,gTCkB3B,EA3BqB,WAAO,IAAD,IACzB,GAAwC0B,EAAAA,EAAAA,UAAS,MAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAsBC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,KAM3D,OAJAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAgBT,GAASU,KAAKX,EAC/B,GAAE,CAACC,IAECF,GAKH,iCACE,SAACL,EAAD,CAASkB,GAAIP,EAAoBQ,QAAjC,sBACA,SAAC,EAAD,CAAWxC,MAAO0B,KAClB,SAACH,EAAD,CAAgBgB,GAAI,OAApB,mBACA,SAAChB,EAAD,CAAgBgB,GAAI,UAApB,sBACA,SAAC,EAAAE,SAAD,WACE,SAAC,KAAD,SAVG,IAcV,C,+LC7BKC,EAAe,IAAIC,gBAAgB,CACvCC,QAAS,mCACTC,SAAU,QACVC,eAAe,IAGjBC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAiB,mCAAG,sGACRD,EAAAA,EAAAA,IAAA,4BAA+BL,IADvB,uBACvBO,EADuB,EACvBA,KADuB,kBAGxBA,EAAKC,SAHmB,2CAAH,qDAMjBb,EAAe,mCAAG,WAAMc,GAAN,yFACNJ,EAAAA,EAAAA,IAAA,gBAAmBI,EAAnB,YAAyBT,IADnB,uBACrBO,EADqB,EACrBA,KADqB,kBAGtBA,GAHsB,2CAAH,sDAMfG,EAAe,mCAAG,WAAMD,GAAN,yFACNJ,EAAAA,EAAAA,IAAA,gBAAmBI,EAAnB,oBAAiCT,IAD3B,uBACrBO,EADqB,EACrBA,KADqB,kBAGtBA,EAAKI,MAHiB,2CAAH,sDAMfC,EAAc,mCAAG,WAAMH,GAAN,yFACLJ,EAAAA,EAAAA,IAAA,gBAAmBI,EAAnB,oBAAiCT,IAD5B,uBACpBO,EADoB,EACpBA,KADoB,kBAGrBA,EAAKC,SAHgB,2CAAH,sDAKdK,EAAc,mCAAG,WAAMvC,GAAN,yFACL+B,EAAAA,EAAAA,IAAA,wBACJL,EADI,kBACkB1B,IAFb,uBACpBiC,EADoB,EACpBA,KADoB,kBAKrBA,EAAKC,SALgB,2CAAH,qD","sources":["components/MovieCard/MovieCard.styled.jsx","components/MovieCard/MovieCard.jsx","pages/MovieDetails/MovieDetails.styled.jsx","pages/MovieDetails/MovieDetails.jsx","services/fetchMovie.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const MovieCardWrapper = styled.div`\n  display: flex;\n  margin: 0 auto;\n  padding: 0 15px;\n  gap: 20px;\n  margin-top: 25px;\n`;\n","import PropTypes from 'prop-types';\nimport { MovieCardWrapper } from './MovieCard.styled';\n\nconst MovieCard = ({ movie }) => {\n  const { poster_path, title, release_date, vote_average, overview, genres } =\n    movie;\n\n  const imgBaseUrl = 'https://image.tmdb.org/t/p/w500/';\n  const imgUrl = imgBaseUrl.concat(poster_path);\n  const realeseDate = release_date.slice(0, 4);\n  const percentage = vote_average.toFixed(1);\n  const genresList = genres.map(genre => genre.name).join(' ');\n\n  return (\n    <MovieCardWrapper>\n      <img src={imgUrl} alt={title} width=\"300\" />\n      <div>\n        <h2>\n          {title} <span>({realeseDate})</span>\n        </h2>\n        <p>\n          User Score:\n          <span>{percentage}</span>\n        </p>\n        <p>\n          Overview:\n          <span>{overview}</span>\n        </p>\n        <p>\n          Genres:\n          <span>{genresList}</span>\n        </p>\n      </div>\n    </MovieCardWrapper>\n  );\n};\n\nexport default MovieCard;\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    poster_path: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    release_date: PropTypes.string.isRequired,\n    vote_average: PropTypes.number.isRequired,\n    overview: PropTypes.string.isRequired,\n    genres: PropTypes.arrayOf(PropTypes.object),\n  }),\n};\n","import styled from '@emotion/styled';\nimport { NavLink, Link } from 'react-router-dom';\n\nexport const BtnBack = styled(Link)`\n  padding: 5px 10px;\n  font-size: 20px;\n  color: white;\n  background-color: blue;\n\n  :hover,\n  :focus-visible {\n    color: tomato;\n  }\n`;\n\nexport const AdditionalInfo = styled(NavLink)`\n  display: inline-block;\n  padding: 8px 14px;\n  font-weight: 500;\n  font-size: 18px;\n  border-radius: 4px;\n  border: none;\n  transition: all 200ms ease-in-out;\n  cursor: pointer;\n  &.active {\n    color: blue;\n  }\n  :hover,\n  :focus-visible {\n    color: tomato;\n  }\n`;\n","import MovieCard from 'components/MovieCard/MovieCard';\nimport { useEffect, useState, useRef, Suspense } from 'react';\nimport { useParams, useLocation, Outlet } from 'react-router-dom';\nimport { getMovieDetails } from 'services/fetchMovie';\nimport { BtnBack, AdditionalInfo } from './MovieDetails.styled';\n\nconst MovieDetails = () => {\n  const [movieDetails, setMovieDetails] = useState(null);\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkLocationRef = useRef(location.state?.from ?? '/');\n\n  useEffect(() => {\n    getMovieDetails(movieId).then(setMovieDetails);\n  }, [movieId]);\n\n  if (!movieDetails) {\n    return null;\n  }\n\n  return (\n    <>\n      <BtnBack to={backLinkLocationRef.current}>Go Back</BtnBack>\n      <MovieCard movie={movieDetails} />\n      <AdditionalInfo to={'cast'}>Cast</AdditionalInfo>\n      <AdditionalInfo to={'reviews'}>Reviews</AdditionalInfo>\n      <Suspense>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nconst searchParams = new URLSearchParams({\n  api_key: 'afc0fa936a8cd405bc4147ee7afbe2a0',\n  language: 'en-US',\n  include_adult: false,\n});\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const getTrendingMovies = async () => {\n  const { data } = await axios.get(`trending/all/week?${searchParams}`);\n\n  return data.results;\n};\n\nexport const getMovieDetails = async id => {\n  const { data } = await axios.get(`movie/${id}?${searchParams}`);\n\n  return data;\n};\n\nexport const getMovieCredits = async id => {\n  const { data } = await axios.get(`movie/${id}/credits?${searchParams}`);\n\n  return data.cast;\n};\n\nexport const getMovieReview = async id => {\n  const { data } = await axios.get(`movie/${id}/reviews?${searchParams}`);\n\n  return data.results;\n};\nexport const getMovieByName = async name => {\n  const { data } = await axios.get(\n    `/search/movie?${searchParams}&query=${name}`\n  );\n\n  return data.results;\n};\n"],"names":["MovieCardWrapper","styled","movie","poster_path","title","release_date","vote_average","overview","genres","imgUrl","concat","realeseDate","slice","percentage","toFixed","genresList","map","genre","name","join","src","alt","width","BtnBack","Link","AdditionalInfo","NavLink","useState","movieDetails","setMovieDetails","movieId","useParams","location","useLocation","backLinkLocationRef","useRef","state","from","useEffect","getMovieDetails","then","to","current","Suspense","searchParams","URLSearchParams","api_key","language","include_adult","axios","getTrendingMovies","data","results","id","getMovieCredits","cast","getMovieReview","getMovieByName"],"sourceRoot":""}